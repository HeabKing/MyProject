<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>// ReSharper disable InconsistentNaming
<#@ output extension=".cs"#>
<# CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\Model\EfModel.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System.Runtime.Remoting.Messaging;

namespace Bll
{
	// ReSharper disable once PartialTypeWithSinglePart
	public partial class BllSession
	{
		<#
		int num = 0;
		// Emit Entity Types
		foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		{ 
		num++;
#>
#region  <#=num.ToString("00")#>. <#=entity.Name#>Bll
		<#=entity.Name#>Bll _<#=entity.Name#>Bll;
		public <#=entity.Name#>Bll <#=entity.Name#>Bll
		{ 
			get { return _<#=entity.Name#>Bll ?? (_<#=entity.Name#>Bll = new <#=entity.Name#>Bll()); }
			set	{ _<#=entity.Name#>Bll = value; }
		}
		#endregion

		<#}#>   

		#region	Current
		public static BllSession Current
		{
			get
			{
				var current = CallContext.GetData(typeof(BllSession).Name) as BllSession;
				if (current == null)
				{
					current = new BllSession();
					CallContext.SetData(typeof(BllSession).Name, current);
				}
				return current;
			}
		}
		#endregion

		#region	Private Metohd
		private BllSession(){}
		#endregion
	}
}